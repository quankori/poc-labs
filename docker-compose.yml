version: "3.8"

services:
  mongo:
    image: mongo
    container_name: mongo-svc
    ports:
      - "27017:27017"
    environment:
      MONGO_DB: mydatabase
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres-svc
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379" # Redis default port
    volumes:
      - redis_data:/data
    restart: unless-stopped

  mongo-event-store:
    image: mongo
    container_name: mongo-event-store-svc
    ports:
      - "27018:27017"
    environment:
      MONGO_DB: event-stored
    command: mongod --replSet event-store-repl-set
    volumes:
      - ./notification-svc/scripts/event-store-mongoinit.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./devops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - api-gateway-svc

  api-gateway-svc:
    build:
      context: ./api-gateway-svc
      dockerfile: Dockerfile
    image: api-gateway-svc
    container_name: api-gateway-svc
    volumes:
      - ./api-gateway-svc:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - grafana
      - postgres
      - mongo
      - redis
      - prometheus
      - kafka
    stdin_open: true
    tty: true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    volumes:
      - ./devops/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5001:5000"
    depends_on:
      - elasticsearch
    networks:
      - app-network
    environment:
      - pipeline.ecs_compatibility=disabled

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./devops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    user: root
    command: filebeat -e -strict.perms=false
    volumes:
      - ./devops/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./products-svc/logs:/var/log/nestjs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    ports:
      - "3005:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  mongo-data:
    driver: local
  postgres-data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
